ARG PODVM_PAYLOAD_IMAGE

# RHEL 10 podvm-payload
FROM ${PODVM_PAYLOAD_IMAGE} AS rhel10-podvm-payload

####################################
# STAGE 1: Setup the initrds builder
####################################

FROM registry.access.redhat.com/ubi10/ubi:latest AS initrds-builder-setup

ARG KERNEL_UNAME
ARG NVIDIA_DRIVER_VERSION
ARG KATA_RPM_FILENAME

WORKDIR /root/artifacts

# Install nvidia drivers
#
# If using DKMS for building the nvidia drivers, make sure the file
# /usr/lib/dracut/dracut.conf.d/99-nvidia.conf is removed, otherwise
# the nvidia drivers will not be added to the initrd when
# running kata-osbuilder.sh
RUN --mount=type=secret,id=org,dst=/run/secrets/org \
      --mount=type=secret,id=key,dst=/run/secrets/key \
      set +x \
    && subscription-manager register \
      --org=$(cat /run/secrets/org) \
      --activationkey=$(cat /run/secrets/key) \
    && subscription-manager repos --enable codeready-builder-for-rhel-10-x86_64-rpms \
    && dnf config-manager --add-repo=https://developer.download.nvidia.com/compute/cuda/repos/rhel10/x86_64/cuda-rhel10.repo \
    && dnf config-manager --best --nodocs --setopt=install_weak_deps=False --save \
    && dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-10.noarch.rpm \
    && dnf install -y \
        openssl \
        kernel-{core,devel}-${KERNEL_UNAME} \
        kmod-nvidia-open-dkms-${NVIDIA_DRIVER_VERSION} \
        nvidia-driver-${NVIDIA_DRIVER_VERSION} \
        nvidia-driver-cuda-${NVIDIA_DRIVER_VERSION} \
        nvidia-driver-libs-${NVIDIA_DRIVER_VERSION} \
        nvidia-persistenced-${NVIDIA_DRIVER_VERSION} \
        nvidia-container-toolkit \
    && rm -f /usr/lib/dracut/dracut.conf.d/99-nvidia.conf

COPY ${KATA_RPM_FILENAME} .

# Install dependencies, including kata-containers
RUN KERNEL_VERSION=$(echo ${KERNEL_UNAME} | rev | cut -d. -f2- | rev) \
    && dnf install -y \
        zstd jq policycoreutils dbus-daemon rsync chrony rsyslog \
        ${KATA_RPM_FILENAME} \
        iptables \
        libtirpc

# Copy pause bundle
# TODO: fix podvm-payload to create a zst tarball as required by the rootfs.sh
COPY --from=rhel10-podvm-payload /pause-bundle.tar.gz .
RUN mkdir -p pause \
    && tar xf pause-bundle.tar.gz -C pause \
    && tar --zstd -cvf pause-bundle.tar.zst -C pause .

# Copy and extract podvm-binaries.tar.gz
COPY --from=rhel10-podvm-payload /podvm-binaries.tar.gz .
RUN mkdir -p podvm-binaries \
    && tar -xf podvm-binaries.tar.gz -C podvm-binaries

# Copy the agent directory installed by the kata-containers rpm, but we can't use
# its kata-agent binary because it does not support policies. So, we copy the one
# from the podvm-payload.
RUN KATA_DIR=/usr/libexec/kata-containers \
    PODVM_DIR=$PWD/podvm-binaries \
    && mkdir -p agent${KATA_DIR} \
    && cp -av ${KATA_DIR}/agent ./agent${KATA_DIR}/ \
    && cp -fv ${PODVM_DIR}/usr/local/bin/kata-agent ./agent${KATA_DIR}/agent/usr/bin/

# Create coco-guest-components tarball
RUN PODVM_DIR=$PWD/podvm-binaries \
    && mkdir -p coco-guest-components/{usr/local/bin,etc} \
    && cd coco-guest-components \
    && cp -fv ${PODVM_DIR}/usr/local/bin/{api-server-rest,attestation-agent,confidential-data-hub,luks-encrypt-storage} usr/local/bin/ \
    && cp -fv ${PODVM_DIR}/etc/ocicrypt_config.json etc/ \
    && tar --zstd -cvf ../coco-guest-components.tar.zst .

# Workaround: sudo
# initrd-builder.sh requires sudo, but enabling it within a container adds some unnecessary complexity
RUN printf '#!/bin/bash \n $@' > /bin/sudo \
    && chmod +x /bin/sudo

# Clean up
RUN subscription-manager unregister \
    && dnf clean all \
    && rm ./${KATA_RPM_FILENAME}

#############################
# Stage 2: Build the initrds
#############################

FROM initrds-builder-setup AS initrds-builder

ARG KERNEL_UNAME

WORKDIR /root/artifacts

# Build the initrds
# If -p is not provided, the restricted-policy.rego is used as default. We ship it with the confidential runtime classes
# For the kata-nvidia-gpu runtime class, we ship the allow-all.rego policy.
RUN export \
        DEBUG=1 \
        AGENT_DIR="$PWD/agent" \
        AGENT_POLICY="/usr/libexec/kata-containers/kata-opa/allow-all.rego" \
        PAUSE_IMAGE_TARBALL="$PWD/pause-bundle.tar.zst" \
        GUEST_COMPONENTS_TARBALL="$PWD/coco-guest-components.tar.zst" \
        KATA_OSBUILDER_SH="/usr/libexec/kata-containers/osbuilder/kata-osbuilder.sh" \
    && ${KATA_OSBUILDER_SH} -k "${KERNEL_UNAME}" -a ${AGENT_DIR} -e ${PAUSE_IMAGE_TARBALL} -g ${GUEST_COMPONENTS_TARBALL} -t "kata-cc" -u \
    && ${KATA_OSBUILDER_SH} -k "${KERNEL_UNAME}" -a ${AGENT_DIR} -e ${PAUSE_IMAGE_TARBALL} -g ${GUEST_COMPONENTS_TARBALL} -t "kata-nvidia-gpu" -p ${AGENT_POLICY} \
    && ${KATA_OSBUILDER_SH} -k "${KERNEL_UNAME}" -a ${AGENT_DIR} -e ${PAUSE_IMAGE_TARBALL} -g ${GUEST_COMPONENTS_TARBALL} -t "kata-nvidia-gpu-cc"

# Remove sudo workaround
RUN rm -f /bin/sudo

# Create kata-initrds tarball
RUN mkdir -p initrds \
    && cd initrds \
    && rm -rf * \
    && mkdir -p usr/share/kata-containers/ \
    && cp -avP /usr/share/kata-containers/osbuilder-images usr/share/kata-containers/ \
    && tar -czvf /kata-initrds.tar.gz .

###################################
# Stage 3: Compose the final image
###################################

FROM registry.access.redhat.com/ubi10/ubi:latest AS rhel10-kata-initrds

COPY --from=initrds-builder /kata-initrds.tar.gz /

RUN if [ -e /host ]; then \cp /kata-initrds.tar.gz /host/; fi
